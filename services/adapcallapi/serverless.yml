# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
# nome do serviço

service: adapcallapi
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
# É possíel colocar qualquer provedor de serviço
provider:
  name: aws
  runtime: nodejs12.x
  region: sa-east-1
  stage: dev
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - node_modules/aws-sdk/**
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # Nome da função ÚNIDA lambda nesse serviçõ: hello
  hello:
    # Caminho onde a função que vai ser executada está
    handler: handler.hello
    events:
      - http:
          # define a rota hello-world
          path: hello-world
          method: get

# Define configurações do Dynamo
resources:
  Resource:
    # Cria uma tabela
    tableLigacoes:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        # Define o nome da tabela
        TableName: Ligacoes
        AttributeDefinitions:
          AttributeName: id
          # Tipo: String, mesmo que seja um número, é bom deixar string pois posteriormente pode precisar concatenar com mais alguma informação
          AttributeType: S
        KeySchema:
          AttributeName: id
          KeyType: HASH
          # AttributeName: id
          # KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
# Para utilizar algo em conjunto com o serverless framework, tem que definir nos plugins
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      # heapInitial: 200m
      # heapMax: 1g
      migrate: true
      # seed: true especifica que tem que rodar o seed, que lÊ o arquivo definido ali em baixo e salva os dados na tabela (ele semeia)
      seed: true
      # convertEmptyValues: converter valores em branco no json para um valor aceitável pelo dynamo, pois o dynamo não deixa colocar uma prop no json em branco, ex: "nome": ""
      convertEmptyValues: true
      seed:
        domain:
          sources:
            -table: Ligacoes
            sources: [./data/Ligacoes-inicial.json]
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"